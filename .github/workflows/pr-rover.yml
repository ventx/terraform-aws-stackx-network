name: PR - Rover

on:
  pull_request:
    paths:
      - 'examples/**'
      - 'tests/**'
      - '**.tf'

permissions:
  id-token: write

jobs:
  rover-trusted:
    name: Rover (trusted)
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      AWS_DEFAULT_REGION: eu-central-1
      TFDIR: .
      TF_VAR_workspace_name: rover
      TF_VAR_subnet_ids: '["subnet-1", "subnet-2", "subnet-3"]'
      TFVER: 1.1.2 # Rover uses Terraform 1.1.2, so we need to use the same version for the plan file
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_GH_OIDC }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TFVER }}

      - name: Terraform Init
        run: terraform -chdir=${{ env.TFDIR }} init

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=${{ env.TFDIR }} plan -no-color -input=false -out=plan.out

      - name: Upload artifcat (plan)
        uses: actions/upload-artifact@v3
        with:
          name: plan.out
          path: ${{ env.TFDIR }}/plan.out

      - name: Convert Terraform plan to JSON
        run: |
          terraform -chdir=${{ env.TFDIR }} show -no-color -json plan.out > plan.json
          head -n -10 plan.json > tmp.txt && mv tmp.txt plan.json
          sed '1d' plan.json -i

      - name: Upload artifcat (plan JSON)
        uses: actions/upload-artifact@v3
        with:
          name: plan.json
          path: plan.json

      - name: Generate rover Terraform visualization
        uses: ventx/stackx-action-rover-terraform@v1

      - name: Upload artifcat (rover image)
        uses: actions/upload-artifact@v3
        with:
          name: rover.png
          path: ${{ env.TFDIR }}/rover.png

      - name: Upload artifcat (rover svg)
        uses: actions/upload-artifact@v3
        with:
          name: rover.svg
          path: ${{ env.TFDIR }}/rover.svg

      - name: Upload artifcat (rover zip)
        uses: actions/upload-artifact@v3
        with:
          name: rover.zip
          path: ${{ env.TFDIR }}/rover.zip

  rover-fork:
    name: Rover (fork)
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      AWS_DEFAULT_REGION: eu-central-1
      TFDIR: .
      TF_VAR_workspace_name: rover
      TF_VAR_subnet_ids: '["subnet-1", "subnet-2", "subnet-3"]'
      TFVER: 1.1.2 # Rover uses Terraform 1.1.2, so we need to use the same version for the plan file
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_GH_OIDC }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TFVER }}

      - name: Terraform Init
        run: terraform -chdir=${{ env.TFDIR }} init

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=${{ env.TFDIR }} plan -no-color -input=false -out=plan.out

      - name: Upload artifcat (plan)
        uses: actions/upload-artifact@v3
        with:
          name: plan.out
          path: ${{ env.TFDIR }}/plan.out

      - name: Convert Terraform plan to JSON
        run: |
          terraform -chdir=${{ env.TFDIR }} show -no-color -json plan.out > plan.json
          head -n -10 plan.json > tmp.txt && mv tmp.txt plan.json
          sed '1d' plan.json -i

      - name: Upload artifcat (plan JSON)
        uses: actions/upload-artifact@v3
        with:
          name: plan.json
          path: plan.json

      - name: Generate rover Terraform visualization
        uses: ventx/stackx-action-rover-terraform@v1

      - name: Upload artifcat (rover image)
        uses: actions/upload-artifact@v3
        with:
          name: rover.png
          path: ${{ env.TFDIR }}/rover.png

      - name: Upload artifcat (rover svg)
        uses: actions/upload-artifact@v3
        with:
          name: rover.svg
          path: ${{ env.TFDIR }}/rover.svg

      - name: Upload artifcat (rover zip)
        uses: actions/upload-artifact@v3
        with:
          name: rover.zip
          path: ${{ env.TFDIR }}/rover.zip

      # Update check run called "integration-fork"
      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;

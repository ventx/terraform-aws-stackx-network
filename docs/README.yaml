about: |
  > Terraform networking module which deploys Kubernetes (EKS) optimized VPC networks and subnets to AWS.
  > Private, Public, Internal (noinet), Database (RDS) and Cache (ElastiCache)
  > subnets supported. CIDR range in 10.x.0.0/16 will be automatically (default) chosen based on Availability Zone.
  > Can be used with or without Kubernetes. -- Part of stackx.

builtwith: |
  > Technologies that are used in this project.
  > [AWS](https://aws.amazon.com)
  > [Terraform](https://www.terraform.io)
  > [Terratest](https://terratest.gruntwork.io)

owner: hajowieland

prerequisites:
  - AWS credentials
  - Terraform

quickstart: |
  To get started, clone the projects, check all configurable [Inputs](#inputs) and deploy everything with `make`.

  ```shell
  git clone https://github.com/ventx/stackx-terraform-aws-network.git
  make all # init, validate, plan, apply
  ```

usage: |

  You can run this module in conjunction with other stackx components (recommended) or as single-use (build your own).

  ### stackx (RECOMMENDED)

  This is just a bare minimum example of how to use the module.
  See all available stackx modules here: https://github.com/ventx


  ```hcl
    module "aws-network" {
      source = "ventx/stackx-network/aws"
      version     = "0.2.0" // Pinned and tested version, generated by {x-release-please-version}
    }
  ```

  ### Single-Use

  ```hcl
    module "aws.network" {
      source = "ventx/stackx-network/aws"
      version     = "0.2.0" // Pinned and tested version, generated by {x-release-please-version}
    }
  ```


terraform: ""

features:
  - "Simple and easy to use, just the bare minimum"
  - Optimized for Kubernetes
  - Single NAT Gateway (default = `false`)
  - IPv6 (default = `false`)
  - (Optional) DB Subnet Group ([RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Subnets), default = `false`)
  - (Optional) ElastiCache Subnet Group ([ElastiCache](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html), default = `false`)
  - The minimum VPC CIDR subnet mask is /16, as too small subnet CIDRs might cause trouble to change afterwards and with K8s Pod networking.
  - Set `var.k8s` = `true` (default) to get bigger `/18` private subnets (for K8s Pods) and smaller `/22` public, database, cache subnets (if enabled)
  - Set `var.k8s` = `false` to get evenly distributed `/20` subnet CIDRs across all subnets

resources:
  - VPC
  - Subnets
    - Public
    - Private
    - Internal
    - Database
    - Cache
  - Subnet Groups
  - Route Tables
  - Routes
  - Internet Gateway
  - NAT Gateway/s
  - IPv6 Egress Gateway
  - S3 VPC Endpoint


imageFile1: screenshot1.png

imageFile2: screenshot2.png

imageDesc1: Diagrams

imageDesc2: Rover
